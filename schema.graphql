"List of Ideas that have been created via the Vision UI"
type Registry @entity {
  id: ID!

  ideas: [Idea!]!
}

type _Schema_
  @fulltext(
    name: "ideaPropSearch"
    language: en
    algorithm: rank
    include: [{ entity: "Idea", fields: [{ name: "name" }, { name: "ipfsAddr" }, { name: "id" }, { name: "ticker" }] }]
  )

type Idea @entity {
  id: ID!
  ipfsAddr: String!

  "The address of the user creating the idea."
  author: User!

  "Contract details from construction"
  ticker: String!
  name: String!
  supply: BigInt!

  "DAO's funded by this Idea"
  children: [Prop!]!

  "Proposals that haven't ever been finalized."
  activeProps: [Prop!]!

  "Proposals that have been accepted or rejected"
  acceptedProps: [Prop!]!
  rejectedProps: [Prop!]!

  "Ways in which the project is receiving funding"
  parents: [Prop!]!

  "Records of the ways people have interacted with this DAO"
  users: [UserProfile!]!

  "Tokens held by the DAO"
  treasury: [TreasuryBalance!]!

  "History of tranfers from the DAO"
  transfers: [Transfer!]!

  "The timestamp the idea was created at"
  createdAt: BigInt!
}

type Transfer @entity {
  id: ID!

  sendUser: User
  sendDao: Idea

  recipUser: User
  recipDao: Idea

  value: BigInt!

  "Hash of the underlying transaction"
  hash: String!

  "Timestamp of the transaction"
  createdAt: BigInt!
}

"A record of a token held by a DAO"
type TreasuryBalance @entity {
  id: ID!

  holder: Idea!
  balance: BigInt!

  "Address of the ERC-20 token being held"
  token: Idea!
}

enum PropStatus {
  Accepted,
  Rejected,
  Pending
}

type Prop @entity {
  id: ID!

  funder: Idea!

  "The Ethereum address to which funds are sent"
  toFund: String!
  rate: FundingRate!

  author: User!
  votes: [Vote!]!
  voters: [User!]!

  votesFor: BigInt!
  votesAgainst: BigInt!

  ipfsAddr: String!
  title: String!

  "UNIX timestamp for when the prop expires"
  expiration: BigInt!

  "The date that the proposal was created at"
  createdAt: BigInt!

  "The time that the proposal was accepted at"
  finalizedAt: BigInt

  status: PropStatus!
}

enum VoteKind {
  For,
  Against,
}

"A snapshot of the proposal being voted on, and the vote cast."
type Vote @entity {
  id: ID!

  "The number of votes cast"
  votes: BigInt!

  "Whether the user voted for or against the prop"
  kind: VoteKind!

  "The proposal being voted on"
  prop: Prop!

  "The user casting the vote"
  voter: VoterProfile!

  "When the vote was cast"
  createdAt: BigInt!
}

"How a project is funded"
enum FundingType {
  Treasury,
  Mint,
}

"A designation of the kind of funding a project receives"
type FundingRate @entity {
  id: ID!
  prop: ID!

  "The ERC-20 token used to fund the project"
  token: String!

  "The number of tokens to send in total"
  value: BigInt!

  "Whether or not the funding has been taken out"
  spent: Boolean!

  "Whether tokens are sent or minted"
  kind: FundingType
}

"A participate on the Vision network"
type User @entity {
  id: ID!

  "The ideas the user participated in somehow"
  ideas: [UserProfile!]!

  "Times the user has transfered a DAO token"
  transfers: [Transfer!]!
}

"A participant in a specific DAO"
type UserProfile @entity {
  "The index of the user among all users of the DAO"
  id: ID!

  dao: Idea!
  user: User!

  "Proposals the user created"
  props: AuthorProfile!

  "Times the user voted, and on which projects"
  votes: VoterProfile!

  "Tokens the user owns"
  tokens: InvestorProfile!
}

"A record of the votes cast by the user for a particular DAO"
type VoterProfile @entity {
  id: ID!

  user: User!
  dao: Idea!

  "Their actual voting record"
  votes: [Vote!]!
}

"A record of the number of tokens owned by a user in an idea"
type InvestorProfile @entity {
  id: ID!

  user: User!
  balance: BigInt!
  dao: Idea!
}

"A record of the proposals a user submitted to a particular DAO"
type AuthorProfile @entity {
  id: ID!

  user: User!
  dao: Idea!
  props: [Prop!]!
}
