"List of Ideas that have been created via the Vision UI"
type Registry @entity {
	ideas: [Idea!]!
}

type Idea @entity {
	ipfsAddr: String!

	"DAO's funded by this Idea"
	children: [Idea!]!

	"Ways in which the project is receiving funding"
	parents: [Prop!]!
}

type Prop @entity {
	funder: Idea!

	"The Ethereum address to which funds are sent"
	toFund: Bytes!
	rate: FundingRate!

	votes: [Vote!]!
	voters: [User!]!

	ipfsAddr: String!
	title: String!

	"UNIX timestamp for when the prop expires"
	expiration: BigInt!
}

"A snapshot of the proposal being voted on, and the vote cast."
type Vote @entity {
	"The number of votes cast"
	votes: BigInt!

	"The details of the user's vote"
	rate: FundingRate!

	"The proposal being voted on"
	prop: Prop!
}

"How a project is funded"
enum FundingType {
	Treasury,
	Mint,
}

"A designation of the kind of funding a project receives"
type FundingRate @entity {
	"The ERC-20 token used to fund the project"
	token: Bytes!

	"The number of tokens to send in total"
	value: BigInt!

	"How oftne tokens should be sent"
	intervalLength: BigInt!

	"Timestamp for when the funding dries up"
	expiry: BigInt!

	"When the funding was last used"
	lastClaimed: BigInt!

	"Whether tokens are sent or minted"
	kind: FundingType
}

"A participate on the Vision network"
type User @entity {
	"The ideas the user owns"
	ideas: [Idea!]!

	"Proposals the user created"
	propsAuthored: [Prop!]!

	"Times the user voted, and on which projects"
	profiles: [VoterProfile!]!
}

"A record of the votes cast by the user for a particular DAO"
type VoterProfile @entity {
	user: User!
	dao: Idea!

	"Their actual voting record"
	votes: [Vote!]!
}

