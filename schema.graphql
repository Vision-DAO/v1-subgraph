"List of Ideas that have been created via the Vision UI"
type Registry @entity {
  id: ID!

  ideas: [Idea!]!
}

type Idea @entity {
  id: ID!

  ipfsAddr: String!

  "DAO's funded by this Idea"
  children: [Idea!]!

  "Ways in which the project is receiving funding"
  parents: [Prop!]!

  "Records of the ways people have interacted with this DAO"
  users: [UserProfile!]!
}

enum PropStatus {
  Accepted,
  Rejected,
  Pending
}

type Prop @entity {
  id: ID!

  funder: Idea!

  "The Ethereum address to which funds are sent"
  toFund: Bytes!
  rate: FundingRate!

  votes: [Vote!]!
  voters: [User!]!

  ipfsAddr: String!
  title: String!

  "UNIX timestamp for when the prop expires"
  expiration: BigInt!

  status: PropStatus!
}

"A snapshot of the proposal being voted on, and the vote cast."
type Vote @entity {
  id: ID!

  "The number of votes cast"
  votes: BigInt!

  "The details of the user's vote"
  rate: FundingRate!

  "The proposal being voted on"
  prop: Prop!
}

"How a project is funded"
enum FundingType {
  Treasury,
  Mint,
}

"A designation of the kind of funding a project receives"
type FundingRate @entity {
  id: ID!

  "The ERC-20 token used to fund the project"
  token: Bytes!

  "The number of tokens to send in total"
  value: BigInt!

  "How oftne tokens should be sent"
  intervalLength: BigInt!

  "Timestamp for when the funding dries up"
  expiry: BigInt!

  "When the funding was last used"
  lastClaimed: BigInt!

  "Whether tokens are sent or minted"
  kind: FundingType
}

"A participate on the Vision network"
type User @entity {
  id: ID!

  "The ideas the user participated in somehow"
  ideas: [UserProfile!]!
}

"A participant in a specific DAO"
type UserProfile @entity {
  "The index of the user among all users of the DAO"
  id: ID!

  dao: Idea!
  user: User!

  "Proposals the user created"
  props: AuthorProfile!

  "Times the user voted, and on which projects"
  votes: VoterProfile!

  "Tokens the user owns"
  tokens: InvestorProfile!
}

"A record of the votes cast by the user for a particular DAO"
type VoterProfile @entity {
  id: ID!

  user: User!
  dao: Idea!

  "Their actual voting record"
  votes: [Vote!]!
}

"A record of the number of tokens owned by a user in an idea"
type InvestorProfile @entity {
  id: ID!

  user: User!
  balance: BigInt!
  dao: Idea!
}

"A record of the proposals a user submitted to a particular DAO"
type AuthorProfile @entity {
  id: ID!

  user: User!
  dao: Idea!
  props: [Prop!]!
}
