// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Registry extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Registry entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Registry must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Registry", id.toString(), this);
    }
  }

  static load(id: string): Registry | null {
    return changetype<Registry | null>(store.get("Registry", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ideas(): Array<string> {
    let value = this.get("ideas");
    return value!.toStringArray();
  }

  set ideas(value: Array<string>) {
    this.set("ideas", Value.fromStringArray(value));
  }
}

export class Idea extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Idea entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Idea must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Idea", id.toString(), this);
    }
  }

  static load(id: string): Idea | null {
    return changetype<Idea | null>(store.get("Idea", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ipfsAddr(): string {
    let value = this.get("ipfsAddr");
    return value!.toString();
  }

  set ipfsAddr(value: string) {
    this.set("ipfsAddr", Value.fromString(value));
  }

  get ticker(): string {
    let value = this.get("ticker");
    return value!.toString();
  }

  set ticker(value: string) {
    this.set("ticker", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get supply(): BigInt {
    let value = this.get("supply");
    return value!.toBigInt();
  }

  set supply(value: BigInt) {
    this.set("supply", Value.fromBigInt(value));
  }

  get children(): Array<string> {
    let value = this.get("children");
    return value!.toStringArray();
  }

  set children(value: Array<string>) {
    this.set("children", Value.fromStringArray(value));
  }

  get activeProps(): Array<string> {
    let value = this.get("activeProps");
    return value!.toStringArray();
  }

  set activeProps(value: Array<string>) {
    this.set("activeProps", Value.fromStringArray(value));
  }

  get acceptedProps(): Array<string> {
    let value = this.get("acceptedProps");
    return value!.toStringArray();
  }

  set acceptedProps(value: Array<string>) {
    this.set("acceptedProps", Value.fromStringArray(value));
  }

  get rejectedProps(): Array<string> {
    let value = this.get("rejectedProps");
    return value!.toStringArray();
  }

  set rejectedProps(value: Array<string>) {
    this.set("rejectedProps", Value.fromStringArray(value));
  }

  get parents(): Array<string> {
    let value = this.get("parents");
    return value!.toStringArray();
  }

  set parents(value: Array<string>) {
    this.set("parents", Value.fromStringArray(value));
  }

  get users(): Array<string> {
    let value = this.get("users");
    return value!.toStringArray();
  }

  set users(value: Array<string>) {
    this.set("users", Value.fromStringArray(value));
  }

  get treasury(): Array<string> {
    let value = this.get("treasury");
    return value!.toStringArray();
  }

  set treasury(value: Array<string>) {
    this.set("treasury", Value.fromStringArray(value));
  }

  get transfers(): Array<string> {
    let value = this.get("transfers");
    return value!.toStringArray();
  }

  set transfers(value: Array<string>) {
    this.set("transfers", Value.fromStringArray(value));
  }
}

export class Transfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Transfer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Transfer", id.toString(), this);
    }
  }

  static load(id: string): Transfer | null {
    return changetype<Transfer | null>(store.get("Transfer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sendUser(): string | null {
    let value = this.get("sendUser");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set sendUser(value: string | null) {
    if (!value) {
      this.unset("sendUser");
    } else {
      this.set("sendUser", Value.fromString(<string>value));
    }
  }

  get sendDao(): string | null {
    let value = this.get("sendDao");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set sendDao(value: string | null) {
    if (!value) {
      this.unset("sendDao");
    } else {
      this.set("sendDao", Value.fromString(<string>value));
    }
  }

  get recipUser(): string | null {
    let value = this.get("recipUser");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set recipUser(value: string | null) {
    if (!value) {
      this.unset("recipUser");
    } else {
      this.set("recipUser", Value.fromString(<string>value));
    }
  }

  get recipDao(): string | null {
    let value = this.get("recipDao");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set recipDao(value: string | null) {
    if (!value) {
      this.unset("recipDao");
    } else {
      this.set("recipDao", Value.fromString(<string>value));
    }
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get hash(): string {
    let value = this.get("hash");
    return value!.toString();
  }

  set hash(value: string) {
    this.set("hash", Value.fromString(value));
  }
}

export class TreasuryBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TreasuryBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TreasuryBalance must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TreasuryBalance", id.toString(), this);
    }
  }

  static load(id: string): TreasuryBalance | null {
    return changetype<TreasuryBalance | null>(store.get("TreasuryBalance", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get holder(): string {
    let value = this.get("holder");
    return value!.toString();
  }

  set holder(value: string) {
    this.set("holder", Value.fromString(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value!.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }
}

export class Prop extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Prop entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Prop must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Prop", id.toString(), this);
    }
  }

  static load(id: string): Prop | null {
    return changetype<Prop | null>(store.get("Prop", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get funder(): string {
    let value = this.get("funder");
    return value!.toString();
  }

  set funder(value: string) {
    this.set("funder", Value.fromString(value));
  }

  get toFund(): string {
    let value = this.get("toFund");
    return value!.toString();
  }

  set toFund(value: string) {
    this.set("toFund", Value.fromString(value));
  }

  get rate(): string {
    let value = this.get("rate");
    return value!.toString();
  }

  set rate(value: string) {
    this.set("rate", Value.fromString(value));
  }

  get author(): string {
    let value = this.get("author");
    return value!.toString();
  }

  set author(value: string) {
    this.set("author", Value.fromString(value));
  }

  get votes(): Array<string> {
    let value = this.get("votes");
    return value!.toStringArray();
  }

  set votes(value: Array<string>) {
    this.set("votes", Value.fromStringArray(value));
  }

  get voters(): Array<string> {
    let value = this.get("voters");
    return value!.toStringArray();
  }

  set voters(value: Array<string>) {
    this.set("voters", Value.fromStringArray(value));
  }

  get ipfsAddr(): string {
    let value = this.get("ipfsAddr");
    return value!.toString();
  }

  set ipfsAddr(value: string) {
    this.set("ipfsAddr", Value.fromString(value));
  }

  get title(): string {
    let value = this.get("title");
    return value!.toString();
  }

  set title(value: string) {
    this.set("title", Value.fromString(value));
  }

  get expiration(): BigInt {
    let value = this.get("expiration");
    return value!.toBigInt();
  }

  set expiration(value: BigInt) {
    this.set("expiration", Value.fromBigInt(value));
  }

  get status(): string {
    let value = this.get("status");
    return value!.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }
}

export class Vote extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Vote entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Vote must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Vote", id.toString(), this);
    }
  }

  static load(id: string): Vote | null {
    return changetype<Vote | null>(store.get("Vote", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get votes(): BigInt {
    let value = this.get("votes");
    return value!.toBigInt();
  }

  set votes(value: BigInt) {
    this.set("votes", Value.fromBigInt(value));
  }

  get rate(): string {
    let value = this.get("rate");
    return value!.toString();
  }

  set rate(value: string) {
    this.set("rate", Value.fromString(value));
  }

  get prop(): string {
    let value = this.get("prop");
    return value!.toString();
  }

  set prop(value: string) {
    this.set("prop", Value.fromString(value));
  }
}

export class FundingRate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FundingRate entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FundingRate must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FundingRate", id.toString(), this);
    }
  }

  static load(id: string): FundingRate | null {
    return changetype<FundingRate | null>(store.get("FundingRate", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get intervalLength(): BigInt {
    let value = this.get("intervalLength");
    return value!.toBigInt();
  }

  set intervalLength(value: BigInt) {
    this.set("intervalLength", Value.fromBigInt(value));
  }

  get expiry(): BigInt {
    let value = this.get("expiry");
    return value!.toBigInt();
  }

  set expiry(value: BigInt) {
    this.set("expiry", Value.fromBigInt(value));
  }

  get lastClaimed(): BigInt {
    let value = this.get("lastClaimed");
    return value!.toBigInt();
  }

  set lastClaimed(value: BigInt) {
    this.set("lastClaimed", Value.fromBigInt(value));
  }

  get kind(): string | null {
    let value = this.get("kind");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set kind(value: string | null) {
    if (!value) {
      this.unset("kind");
    } else {
      this.set("kind", Value.fromString(<string>value));
    }
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ideas(): Array<string> {
    let value = this.get("ideas");
    return value!.toStringArray();
  }

  set ideas(value: Array<string>) {
    this.set("ideas", Value.fromStringArray(value));
  }

  get transfers(): Array<string> {
    let value = this.get("transfers");
    return value!.toStringArray();
  }

  set transfers(value: Array<string>) {
    this.set("transfers", Value.fromStringArray(value));
  }
}

export class UserProfile extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserProfile entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserProfile must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserProfile", id.toString(), this);
    }
  }

  static load(id: string): UserProfile | null {
    return changetype<UserProfile | null>(store.get("UserProfile", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dao(): string {
    let value = this.get("dao");
    return value!.toString();
  }

  set dao(value: string) {
    this.set("dao", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get props(): string {
    let value = this.get("props");
    return value!.toString();
  }

  set props(value: string) {
    this.set("props", Value.fromString(value));
  }

  get votes(): string {
    let value = this.get("votes");
    return value!.toString();
  }

  set votes(value: string) {
    this.set("votes", Value.fromString(value));
  }

  get tokens(): string {
    let value = this.get("tokens");
    return value!.toString();
  }

  set tokens(value: string) {
    this.set("tokens", Value.fromString(value));
  }
}

export class VoterProfile extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VoterProfile entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VoterProfile must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("VoterProfile", id.toString(), this);
    }
  }

  static load(id: string): VoterProfile | null {
    return changetype<VoterProfile | null>(store.get("VoterProfile", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get dao(): string {
    let value = this.get("dao");
    return value!.toString();
  }

  set dao(value: string) {
    this.set("dao", Value.fromString(value));
  }

  get votes(): Array<string> {
    let value = this.get("votes");
    return value!.toStringArray();
  }

  set votes(value: Array<string>) {
    this.set("votes", Value.fromStringArray(value));
  }
}

export class InvestorProfile extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save InvestorProfile entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type InvestorProfile must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("InvestorProfile", id.toString(), this);
    }
  }

  static load(id: string): InvestorProfile | null {
    return changetype<InvestorProfile | null>(store.get("InvestorProfile", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value!.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get dao(): string {
    let value = this.get("dao");
    return value!.toString();
  }

  set dao(value: string) {
    this.set("dao", Value.fromString(value));
  }
}

export class AuthorProfile extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AuthorProfile entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AuthorProfile must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AuthorProfile", id.toString(), this);
    }
  }

  static load(id: string): AuthorProfile | null {
    return changetype<AuthorProfile | null>(store.get("AuthorProfile", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get dao(): string {
    let value = this.get("dao");
    return value!.toString();
  }

  set dao(value: string) {
    this.set("dao", Value.fromString(value));
  }

  get props(): Array<string> {
    let value = this.get("props");
    return value!.toStringArray();
  }

  set props(value: Array<string>) {
    this.set("props", Value.fromStringArray(value));
  }
}
